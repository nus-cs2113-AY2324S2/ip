import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import static java.lang.Integer.parseInt;

/** Parser class that handles and interprets all the user's inputs */
public class Parser {
    private static final int BY_PADDING = 3;
    private static final int FROM_PADDING = 5;
    private static final int TITLE_PADDING = 6;

    /**
     * Extracts the command from user input.
     *
     * @param line Line generated by the user input.
     * @return Key for the command.
     */
    public String checkKey(String line) {
        String[] phrases = line.split(" ", 2);
        return phrases[0].toLowerCase();
    }

    /**
     * Finds and parses the string to obtain the index to mark/unmark.
     *
     * @param line Line generated by the user input.
     * @return Index of the task to mark.
     * @throws ArrayIndexOutOfBoundsException If index is left empty.
     * @throws NumberFormatException If the index is not a valid number.
     */
    public int parseIndexToMark(String line) throws Exception {
        int index;
        try {
            index = parseInt(line.split(" ")[1]) - 1;
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Which task are u referring to");
        } catch (NumberFormatException e) {
            throw new NumberFormatException("Enter a proper task number to mark");
        }
        return index;
    }

    /**
     * Interprets and parses the date keyed by user into LocalDateTime object.
     *
     * @param line Line to be parsed into LocalDateTime object.
     * @return The date and time.
     */
    public LocalDateTime dateAndTimeParser(String line) {
        LocalDateTime date;
        try {
            date = LocalDateTime.parse(line);
        } catch (DateTimeParseException e) {
            throw new DateTimeParseException("Enter a date in the format <YYYY-MM-DD>T<HH-MM>", e.getParsedString(), e.getErrorIndex());
        }
        return date;
    }

    /**
     * Interprets and parses the date keyed by user into LocalDate object.
     *
     * @param line Line to be parsed into LocalDateTime object
     * @return The date
     */
    public LocalDate dateParser(String line) {
        LocalDate date;
        try {
            date = LocalDate.parse(line);
        } catch (DateTimeParseException e) {
            throw new DateTimeParseException("Enter a date in the format <YYYY-MM-DD>", e.getParsedString(), e.getErrorIndex());
        }
        return date;
    }

    /**
     * Extracts the task title from the user inputs.
     *
     * @param line Line keyed by the user input.
     * @return Task title.
     * @throws ArrayIndexOutOfBoundsException If the title is empty.
     */
    public String todoParser(String line) throws Exception {
        String title;
        try {
            title = line.split(" ", 2)[1];
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("What task are you trying to add??? Please enter a task");
        }
        return title;
    }

    /**
     * Extracts the task title and due date from the user inputs.
     *
     * @param line Line keyed by the user input.
     * @return Task title and the due date in a list.
     * @throws ArrayIndexOutOfBoundsException If the title is empty.
     * @throws EmptyInputException If any of the required inputs is empty.
     */
    public ArrayList<Object> deadlineParser(String line) throws Exception {
        String title;
        LocalDateTime end;
        try {
            title = line.split("/")[0].split(" ", 2)[1].strip();
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("What task are you trying to add??? Please enter a task");
        }
        if (title.isBlank()) {
            throw new EmptyInputException("Why is the task description blank!"); // Throws exception if task is blank
        }
        int byIndex = line.indexOf("/by");
        if (byIndex == -1) {
            throw new ArrayIndexOutOfBoundsException("Enter a due date with the initializer /by <YYYY-MM-DD>T<HH-MM>"); // Throws exception if initializer not found
        }
        end = dateAndTimeParser(line.substring(byIndex + BY_PADDING).strip());
        ArrayList<Object> parsed = new ArrayList<>();
        parsed.add(title);
        parsed.add(end);
        return parsed;
    }

    /**
     * Extracts the task title, start date and due date from the user inputs.
     *
     * @param line Line keyed by the user input.
     * @return Task title, start date and the due date in a list.
     * @throws ArrayIndexOutOfBoundsException If the title is empty.
     * @throws EmptyInputException If any of the required inputs is empty.
     * @throws StringIndexOutOfBoundsException If any of the initializers /from or /to is missing.
     */
    public ArrayList<Object> eventParser(String line) throws Exception {
        String title;
        LocalDateTime start;
        LocalDateTime end;
        try {
            title = line.split("/")[0].split(" ", 2)[1].strip();
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("What task are you trying to add??? Please enter a task");
        }
        int fromIndex = line.indexOf("/from");
        int toIndex = line.indexOf("/to");
        if (title.isBlank()) {
            throw new EmptyInputException("Why is the task description blank!"); // Throws exception if task is blank
        }
        if (fromIndex == -1 || toIndex == -1) {
            throw new StringIndexOutOfBoundsException("Enter the duration with the initializer /from <YYYY-MM-DD>T<HH-MM> /to <YYYY-MM-DD>T<HH-MM> or don't try at all"); // Throws exception if initializers not found
        }
        try {
            String startString = line.substring(fromIndex + FROM_PADDING, toIndex).strip();
            String endString = line.substring(line.indexOf("/to") + BY_PADDING).strip();
            if (startString.isBlank()) {
                throw new EmptyInputException("Please fill in the start date");
            } else if (endString.isBlank()) {
                throw new EmptyInputException("Please fill in the end date");
            }
            start = dateAndTimeParser(startString);
            end = dateAndTimeParser(endString);
        } catch (StringIndexOutOfBoundsException e) {
            throw new StringIndexOutOfBoundsException("Please enter the /from date before /to date");
        }
        ArrayList<Object> parsed = new ArrayList<>();
        parsed.add(title);
        parsed.add(start);
        parsed.add(end);
        return parsed;
    }

    /**
     * Extracts the task index to delete and validates if it is a number.
     *
     * @param line Line keyed by the user input.
     * @return Number of the task in the list.
     * @throws IndexOutOfBoundsException If the task number is not a number.
     * @throws ArrayIndexOutOfBoundsException If the task number is not specified.
     */
    public int deleteParser(String line) throws Exception {
        Pattern pattern = Pattern.compile("^[0-9]+$");
        String taskNumber;
        int taskIndex;
        try {
            taskNumber = line.split(" ", 2)[1];
            if (!pattern.matcher(taskNumber).matches()) {
                throw new InvalidInputException("That's not valid number, enter a proper task number");
            }
            taskIndex = Integer.parseInt(taskNumber);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Which task you trying to delete?");
        }
        return taskIndex;
    }

    /**
     *Extracts the date from the user input and parse it into LocalDate object.
     *
     * @param line Line keyed by the user input.
     * @return Date to filter tasks to match from the list.
     */
    public LocalDate findParser(String line) {
        LocalDate date;
        int index = line.indexOf("/date") + 5;
        date = dateParser(line.substring(index).strip());
        return date;
    }

    /**
     *Extracts the title from the user input.
     *
     * @param line Line keyed by the user input.
     * @return Date to task title to match from the list.
     */
    public String findFromTitleParser(String line) throws Exception {
        if (line.contains("/title")) {
            int index = line.indexOf("/title") + TITLE_PADDING;
            String title = line.substring(index).strip();
            if (title.isBlank()) {
                throw new EmptyInputException("What task are you searching for?");
            }
            return title;
        } else {
            throw new InvalidInputException("Enter a valid title with the initializer /title <keyword>");
        }
    }
}
